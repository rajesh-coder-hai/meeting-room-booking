version: "3.8" # Specify docker-compose version

services:
  # Backend Service (Node.js/Express)
  backend:
    build:
      context: ./backend # Path to backend directory relative to docker-compose.yml
      dockerfile: Dockerfile # Assumes Dockerfile is named 'Dockerfile' in ./backend
    container_name: meeting-room-backend
    ports:
      - "5000:5000" # Map host port 5000 to container port 5000 (or your backend PORT)
    env_file:
      - ./backend/.env # Load environment variables from backend/.env
    volumes:
      # Mount source code for development hot-reloading
      # Exclude node_modules by using a named volume trick or let Docker handle it
      - ./backend:/app
      - /app/node_modules # Use a volume to persist node_modules separately if needed, or just ignore
    # Command to run the backend development server (adjust if your script is different)
    command: npm run start
    restart: unless-stopped

  # Frontend Service (React/Vite)
  frontend:
    build:
      context: ./frontend # Path to frontend directory
      dockerfile: Dockerfile # Assumes Dockerfile is named 'Dockerfile' in ./frontend
    container_name: meeting-room-frontend
    ports:
      - "5173:5173" # Map host port 5173 to container port 5173 (Vite default)
    # Vite uses import.meta.env, which reads .env files at runtime.
    # Mounting the volume below makes the .env file available inside the container.
    # Alternatively, pass specific variables using 'environment:' key if preferred.
    # env_file:
    #   - ./frontend/.env # This might load them for build stage if needed by Dockerfile, but runtime is key for Vite
    volumes:
      # Mount source code for development hot-reloading
      - ./frontend:/app
      - /app/node_modules # Use a volume or ignore node_modules
    # Command to run the frontend development server (Vite default)
    command: npm run start -- --host # Use --host to expose the server outside the container
    restart: unless-stopped
    depends_on: # Optional: Waits for backend to start, but doesn't guarantee readiness
      - backend
# Optional: Define named volumes if you excluded node_modules above
# volumes:
#   backend_node_modules:
#   frontend_node_modules:
